

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gei-postgres
    environment:
      POSTGRES_DB: gei_unified
      POSTGRES_USER: gei_user
      POSTGRES_PASSWORD: gei_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gei_user -d gei_unified"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para sesiones y cache
  redis:
    image: redis:7-alpine
    container_name: gei-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicaci√≥n principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gei-unified-platform
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://gei_user:gei_password@postgres:5432/gei_unified
      REDIS_URL: redis://redis:6379
      SESSION_SECRET: dev-secret-key-change-in-production
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    command: npm start

  # Nginx para proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: gei-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: gei-network 