#!/usr/bin/env node

// Script para diagnosticar problemas de producci√≥n
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

async function diagnoseProduction() {
  console.log('üåê DIAGN√ìSTICO DE PROBLEMAS DE PRODUCCI√ìN');
  console.log('==========================================');
  
  try {
    // 1. Verificar configuraci√≥n de dominio
    console.log('\nüåç Verificando configuraci√≥n de dominio...');
    console.log('‚úÖ Dominio objetivo: gei.adeptify.es');
    console.log('‚úÖ Render URL: gei-adeptify.onrender.com');
    console.log('');
    console.log('üîç Posibles problemas:');
    console.log('1. DNS no configurado correctamente');
    console.log('2. Render no est√° sirviendo la aplicaci√≥n');
    console.log('3. La aplicaci√≥n no est√° iniciando');
    console.log('4. Problemas de configuraci√≥n de Render');
    
    // 2. Verificar archivos de build
    console.log('\nüìÅ Verificando archivos de build...');
    const buildFiles = [
      'dist/index.js',
      'client/dist/index.html',
      'client/dist/assets'
    ];
    
    for (const file of buildFiles) {
      const fullPath = join(process.cwd(), file);
      if (existsSync(fullPath)) {
        const { statSync } = await import('fs');
        const stats = statSync(fullPath);
        if (stats.isDirectory()) {
          console.log(`  ‚úÖ ${file}: [Directorio]`);
        } else {
          console.log(`  ‚úÖ ${file}: ${stats.size} bytes`);
        }
      } else {
        console.log(`  ‚ùå ${file}: NO EXISTE`);
      }
    }
    
    // 3. Verificar configuraci√≥n de Render
    console.log('\nüîß Verificando configuraci√≥n de Render...');
    const renderPath = join(process.cwd(), 'render.yaml');
    
    if (existsSync(renderPath)) {
      console.log('‚úÖ render.yaml existe');
      const renderConfig = readFileSync(renderPath, 'utf8');
      
      // Verificar configuraci√≥n cr√≠tica
      const criticalConfigs = [
        'healthCheckPath: /api/health',
        'startCommand: ./scripts/start-production-optimized.sh',
        'buildCommand: npm install && npm run build'
      ];
      
      criticalConfigs.forEach(config => {
        if (renderConfig.includes(config)) {
          console.log(`  ‚úÖ ${config}`);
        } else {
          console.log(`  ‚ùå ${config} - NO ENCONTRADO`);
        }
      });
    } else {
      console.log('‚ùå render.yaml no existe');
    }
    
    // 4. Verificar script de inicio
    console.log('\nüöÄ Verificando script de inicio...');
    const startScriptPath = join(process.cwd(), 'scripts/start-production-optimized.sh');
    
    if (existsSync(startScriptPath)) {
      console.log('‚úÖ start-production-optimized.sh existe');
      const startScript = readFileSync(startScriptPath, 'utf8');
      console.log(`  üìä Tama√±o: ${startScript.length} caracteres`);
    } else {
      console.log('‚ùå start-production-optimized.sh no existe');
    }
    
    // 5. Verificar package.json
    console.log('\nüì¶ Verificando package.json...');
    const packagePath = join(process.cwd(), 'package.json');
    const packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));
    
    const requiredScripts = ['start', 'build'];
    requiredScripts.forEach(script => {
      if (packageJson.scripts?.[script]) {
        console.log(`  ‚úÖ ${script}: ${packageJson.scripts[script]}`);
      } else {
        console.log(`  ‚ùå ${script}: NO CONFIGURADO`);
      }
    });
    
    // 6. An√°lisis del problema
    console.log('\nüéØ AN√ÅLISIS DEL PROBLEMA:');
    console.log('==========================');
    console.log('La aplicaci√≥n no se muestra en gei.adeptify.es');
    console.log('');
    console.log('Posibles causas:');
    console.log('1. üîç DNS no configurado');
    console.log('2. üöÄ Render no est√° ejecutando la aplicaci√≥n');
    console.log('3. ‚öôÔ∏è Configuraci√≥n incorrecta en Render');
    console.log('4. üîß Script de inicio fallando');
    console.log('5. üåê Problemas de red/firewall');
    
    // 7. Plan de acci√≥n
    console.log('\nüí° PLAN DE ACCI√ìN:');
    console.log('==================');
    console.log('1. ‚úÖ Verificar logs de Render Dashboard');
    console.log('2. ‚úÖ Probar URL directa de Render');
    console.log('3. ‚úÖ Verificar configuraci√≥n de DNS');
    console.log('4. ‚úÖ Revisar variables de entorno en Render');
    console.log('5. ‚úÖ Verificar que la aplicaci√≥n inicia correctamente');
    
    // 8. Comandos para probar
    console.log('\nüîß Comandos para probar:');
    console.log('=======================');
    console.log('1. Probar Render directamente:');
    console.log('   curl https://gei-adeptify.onrender.com/health');
    console.log('   curl https://gei-adeptify.onrender.com/api/health');
    console.log('');
    console.log('2. Probar dominio personalizado:');
    console.log('   curl https://gei.adeptify.es/health');
    console.log('   curl https://gei.adeptify.es/api/health');
    console.log('');
    console.log('3. Verificar DNS:');
    console.log('   nslookup gei.adeptify.es');
    console.log('   dig gei.adeptify.es');
    console.log('');
    console.log('4. Verificar en Render Dashboard:');
    console.log('   - Ir a https://dashboard.render.com');
    console.log('   - Seleccionar el servicio gei-unified-platform');
    console.log('   - Verificar logs y estado');
    
    // 9. Verificaci√≥n de configuraci√≥n
    console.log('\n‚öôÔ∏è VERIFICACI√ìN DE CONFIGURACI√ìN:');
    console.log('=================================');
    console.log('1. ‚úÖ Variables de entorno en Render:');
    console.log('   - NODE_ENV=production');
    console.log('   - DATABASE_URL (configurada)');
    console.log('   - SESSION_SECRET (configurada)');
    console.log('   - PORT=3000');
    console.log('');
    console.log('2. ‚úÖ Configuraci√≥n de dominio:');
    console.log('   - gei.adeptify.es ‚Üí gei-adeptify.onrender.com');
    console.log('   - SSL configurado');
    console.log('   - DNS propagado');
    console.log('');
    console.log('3. ‚úÖ Configuraci√≥n de Render:');
    console.log('   - Health check: /api/health');
    console.log('   - Auto-deploy: habilitado');
    console.log('   - Plan: starter');
    
    // 10. Pr√≥ximos pasos
    console.log('\nüéØ PR√ìXIMOS PASOS:');
    console.log('==================');
    console.log('1. üîç Verificar logs en Render Dashboard');
    console.log('2. üîç Probar URL directa de Render');
    console.log('3. üîç Verificar configuraci√≥n de DNS');
    console.log('4. üîç Revisar variables de entorno');
    console.log('5. üîç Verificar que la aplicaci√≥n inicia');
    console.log('');
    console.log('üí° Si Render funciona pero el dominio no:');
    console.log('   - Problema de DNS o configuraci√≥n de dominio');
    console.log('');
    console.log('üí° Si Render no funciona:');
    console.log('   - Problema de configuraci√≥n de Render');
    console.log('   - Problema en el c√≥digo de la aplicaci√≥n');
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error);
  }
}

diagnoseProduction().catch((error) => {
  console.error('‚ùå Error en el script:', error);
  process.exit(1);
}); 