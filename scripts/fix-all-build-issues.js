#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Iniciando verificaci√≥n y soluci√≥n de problemas de build...\n');

// 1. Verificar archivo checkbox.tsx
console.log('1Ô∏è‚É£ Verificando archivo checkbox.tsx...');
const checkboxPath = path.join(__dirname, '../client/src/components/ui/checkbox.tsx');

if (!fs.existsSync(checkboxPath)) {
  console.error('‚ùå Error: El archivo checkbox.tsx no existe');
  process.exit(1);
}

const checkboxContent = fs.readFileSync(checkboxPath, 'utf8');
if (!checkboxContent.includes('@radix-ui/react-checkbox') || !checkboxContent.includes('export { Checkbox }')) {
  console.error('‚ùå Error: El archivo checkbox.tsx no tiene el contenido correcto');
  process.exit(1);
}
console.log('‚úÖ Archivo checkbox.tsx verificado correctamente');

// 2. Verificar dependencias en package.json
console.log('\n2Ô∏è‚É£ Verificando dependencias en package.json...');
const packageJsonPath = path.join(__dirname, '../package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

const requiredDeps = [
  '@radix-ui/react-checkbox',
  'redis',
  'socket.io',
  'ioredis'
];

for (const dep of requiredDeps) {
  if (!packageJson.dependencies[dep]) {
    console.error(`‚ùå Error: ${dep} no est√° en las dependencias`);
    process.exit(1);
  }
}
console.log('‚úÖ Todas las dependencias requeridas est√°n presentes');

// 3. Verificar configuraci√≥n de esbuild
console.log('\n3Ô∏è‚É£ Verificando configuraci√≥n de esbuild...');
const esbuildPath = path.join(__dirname, '../esbuild.config.js');
const esbuildContent = fs.readFileSync(esbuildPath, 'utf8');

const requiredExternals = ['redis', 'socket.io', 'ioredis'];
for (const external of requiredExternals) {
  if (!esbuildContent.includes(`'${external}'`)) {
    console.error(`‚ùå Error: ${external} no est√° en la lista de dependencias externas de esbuild`);
    process.exit(1);
  }
}
console.log('‚úÖ Configuraci√≥n de esbuild verificada correctamente');

// 4. Verificar funci√≥n cn en utils.ts
console.log('\n4Ô∏è‚É£ Verificando funci√≥n cn en utils.ts...');
const utilsPath = path.join(__dirname, '../client/src/lib/utils.ts');
const utilsContent = fs.readFileSync(utilsPath, 'utf8');

if (!utilsContent.includes('export function cn')) {
  console.error('‚ùå Error: La funci√≥n cn no est√° exportada en utils.ts');
  process.exit(1);
}
console.log('‚úÖ Funci√≥n cn verificada correctamente');

// 5. Verificar importaciones de Checkbox
console.log('\n5Ô∏è‚É£ Verificando importaciones de Checkbox...');
const filesToCheck = [
  '../client/src/components/Calendar/EventForm.tsx',
  '../client/src/components/Calendar/CalendarFilters.tsx'
];

for (const filePath of filesToCheck) {
  const fullPath = path.join(__dirname, filePath);
  const content = fs.readFileSync(fullPath, 'utf8');
  
  if (!content.includes("import { Checkbox } from '@/components/ui/checkbox'")) {
    console.error(`‚ùå Error: ${filePath} no importa Checkbox correctamente`);
    process.exit(1);
  }
}
console.log('‚úÖ Todas las importaciones de Checkbox verificadas correctamente');

// 6. Probar build del servidor
console.log('\n6Ô∏è‚É£ Probando build del servidor...');
try {
  execSync('npm run build:server', { 
    stdio: 'inherit',
    cwd: path.join(__dirname, '..'),
    env: { ...process.env, NODE_ENV: 'production' }
  });
  console.log('‚úÖ Build del servidor completado exitosamente');
} catch (error) {
  console.error('‚ùå Error durante el build del servidor:', error.message);
  process.exit(1);
}

// 7. Probar build del cliente
console.log('\n7Ô∏è‚É£ Probando build del cliente...');
try {
  execSync('npm run build:client', { 
    stdio: 'inherit',
    cwd: path.join(__dirname, '..'),
    env: { ...process.env, NODE_ENV: 'production' }
  });
  console.log('‚úÖ Build del cliente completado exitosamente');
} catch (error) {
  console.error('‚ùå Error durante el build del cliente:', error.message);
  process.exit(1);
}

// 8. Probar build completo
console.log('\n8Ô∏è‚É£ Probando build completo...');
try {
  execSync('npm run build', { 
    stdio: 'inherit',
    cwd: path.join(__dirname, '..'),
    env: { ...process.env, NODE_ENV: 'production' }
  });
  console.log('‚úÖ Build completo completado exitosamente');
} catch (error) {
  console.error('‚ùå Error durante el build completo:', error.message);
  process.exit(1);
}

console.log('\nüéâ ¬°Todos los problemas de build han sido resueltos!');
console.log('\nüìã Resumen de verificaciones:');
console.log('   ‚úÖ Archivo checkbox.tsx creado y verificado');
console.log('   ‚úÖ Dependencias redis, socket.io, ioredis verificadas');
console.log('   ‚úÖ Configuraci√≥n de esbuild actualizada');
console.log('   ‚úÖ Funci√≥n cn disponible');
console.log('   ‚úÖ Importaciones de Checkbox correctas');
console.log('   ‚úÖ Build del servidor exitoso');
console.log('   ‚úÖ Build del cliente exitoso');
console.log('   ‚úÖ Build completo exitoso');
console.log('\nüöÄ El proyecto est√° listo para ser desplegado en GitHub!'); 