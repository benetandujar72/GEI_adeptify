#!/usr/bin/env node

// Script para verificar el estado de las migraciones
import postgres from 'postgres';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

const databaseUrl = process.env.DATABASE_URL;

if (!databaseUrl) {
  console.error('‚ùå DATABASE_URL no configurada');
  process.exit(1);
}

const sql = postgres(databaseUrl, {
  max: 1,
  ssl: process.env.NODE_ENV === 'production' ? {
    rejectUnauthorized: false
  } : false
});

async function checkMigrations() {
  console.log('üîÑ VERIFICANDO ESTADO DE MIGRACIONES');
  console.log('=====================================');
  
  try {
    // 1. Verificar conexi√≥n a base de datos
    console.log('\nüóÑÔ∏è Verificando conexi√≥n a base de datos...');
    await sql`SELECT 1`;
    console.log('‚úÖ Conexi√≥n a base de datos: OK');
    
    // 2. Verificar archivos de migraci√≥n
    console.log('\nüìÅ Verificando archivos de migraci√≥n...');
    const drizzlePath = join(process.cwd(), 'drizzle');
    const metaPath = join(drizzlePath, 'meta');
    
    if (existsSync(drizzlePath)) {
      console.log('‚úÖ Directorio drizzle existe');
      
      // Verificar archivos SQL
      const { readdirSync } = await import('fs');
      const sqlFiles = readdirSync(drizzlePath).filter(file => file.endsWith('.sql'));
      
      if (sqlFiles.length > 0) {
        console.log(`  üìù Archivos SQL encontrados: ${sqlFiles.length}`);
        for (const file of sqlFiles) {
          const { statSync } = await import('fs');
          const stats = statSync(join(drizzlePath, file));
          console.log(`    - ${file}: ${stats.size} bytes`);
        }
      } else {
        console.log('  ‚ö†Ô∏è No se encontraron archivos SQL');
      }
      
      // Verificar directorio meta
      if (existsSync(metaPath)) {
        console.log('‚úÖ Directorio meta existe');
        
        const metaFiles = readdirSync(metaPath);
        
        console.log(`  üìù Archivos meta encontrados: ${metaFiles.length}`);
        metaFiles.forEach(file => {
          console.log(`    - ${file}`);
        });
      } else {
        console.log('  ‚ö†Ô∏è Directorio meta no existe');
      }
    } else {
      console.log('‚ùå Directorio drizzle no existe');
    }
    
    // 3. Verificar tabla de migraciones en base de datos
    console.log('\nüìã Verificando tabla de migraciones...');
    const migrationsTableExists = await sql`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = '__drizzle_migrations'
      );
    `;
    
    if (migrationsTableExists[0].exists) {
      console.log('‚úÖ Tabla __drizzle_migrations existe');
      
      // Verificar migraciones aplicadas
      const appliedMigrations = await sql`
        SELECT * FROM __drizzle_migrations 
        ORDER BY created_at DESC
      `;
      
      console.log(`  üìä Migraciones aplicadas: ${appliedMigrations.length}`);
      appliedMigrations.forEach(migration => {
        console.log(`    - ${migration.hash}: ${migration.created_at}`);
      });
      
    } else {
      console.log('‚ùå Tabla __drizzle_migrations no existe');
      console.log('üí° Esto indica que las migraciones no se han aplicado');
    }
    
    // 4. Verificar tablas principales
    console.log('\nüìä Verificando tablas principales...');
    const mainTables = [
      'users',
      'institutes', 
      'modules',
      'sessions'
    ];
    
    for (const table of mainTables) {
      const tableExists = await sql`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = ${table}
        );
      `;
      
      if (tableExists[0].exists) {
        const rowCount = await sql`SELECT COUNT(*) as count FROM ${sql(table)}`;
        console.log(`  ‚úÖ ${table}: ${rowCount[0].count} registros`);
      } else {
        console.log(`  ‚ùå ${table}: NO EXISTE`);
      }
    }
    
    // 5. An√°lisis del warning
    console.log('\nüéØ AN√ÅLISIS DEL WARNING:');
    console.log('=========================');
    console.log('El warning "No se encontraron migraciones o ya est√°n aplicadas"');
    console.log('indica que:');
    console.log('');
    console.log('‚úÖ Las migraciones ya est√°n aplicadas en la base de datos');
    console.log('‚úÖ La base de datos est√° actualizada');
    console.log('‚úÖ No hay nuevas migraciones pendientes');
    console.log('‚úÖ La aplicaci√≥n puede funcionar correctamente');
    console.log('');
    console.log('üí° Esto es NORMAL y NO es un problema');
    
    // 6. Recomendaciones
    console.log('\nüí° RECOMENDACIONES:');
    console.log('==================');
    console.log('1. ‚úÖ El warning es NORMAL - las migraciones est√°n aplicadas');
    console.log('2. ‚úÖ La base de datos est√° actualizada');
    console.log('3. ‚úÖ La aplicaci√≥n puede funcionar correctamente');
    console.log('4. üîç Si necesitas aplicar nuevas migraciones:');
    console.log('   - npm run db:generate (generar nuevas migraciones)');
    console.log('   - npm run db:push (aplicar cambios)');
    console.log('   - npm run db:migrate (aplicar migraciones)');
    
    // 7. Comandos √∫tiles
    console.log('\nüîß Comandos √∫tiles:');
    console.log('===================');
    console.log('1. Verificar estado de migraciones:');
    console.log('   npm run db:check');
    console.log('');
    console.log('2. Generar nuevas migraciones:');
    console.log('   npm run db:generate');
    console.log('');
    console.log('3. Aplicar migraciones:');
    console.log('   npm run db:migrate');
    console.log('');
    console.log('4. Aplicar cambios directamente:');
    console.log('   npm run db:push');
    
  } catch (error) {
    console.error('‚ùå Error verificando migraciones:', error);
    throw error;
  } finally {
    await sql.end();
  }
}

checkMigrations().catch((error) => {
  console.error('‚ùå Error en el script:', error);
  process.exit(1);
}); 