# Script para eliminar secretos usando git filter-repo
# Esta es la herramienta m√°s moderna y recomendada

Write-Host "üîí Eliminando secretos del historial usando git filter-repo..." -ForegroundColor Green

# 1. Instalar git filter-repo si no est√° disponible
Write-Host "üì• Verificando git filter-repo..." -ForegroundColor Yellow
try {
    git filter-repo --version | Out-Null
    Write-Host "‚úÖ git filter-repo ya est√° instalado" -ForegroundColor Green
} catch {
    Write-Host "üì• Instalando git filter-repo..." -ForegroundColor Yellow
    pip install git-filter-repo
}

# 2. Crear backup
Write-Host "üíæ Creando backup del repositorio..." -ForegroundColor Yellow
$backupDir = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
Copy-Item -Path ".git" -Destination $backupDir -Recurse -Force
Write-Host "‚úÖ Backup creado en: $backupDir" -ForegroundColor Green

# 3. Crear archivo de patrones de reemplazo
Write-Host "üìù Creando patrones de reemplazo..." -ForegroundColor Yellow
$replaceFile = "replace-patterns.txt"
@"
sk-[a-zA-Z0-9]{48}==>your-openai-api-key-here
pk_[a-zA-Z0-9]{24}==>your-stripe-publishable-key-here
AIza[a-zA-Z0-9_-]{35}==>your-google-api-key-here
ghp_[a-zA-Z0-9]{36}==>your-github-token-here
gho_[a-zA-Z0-9]{36}==>your-github-token-here
ghu_[a-zA-Z0-9]{36}==>your-github-token-here
ghs_[a-zA-Z0-9]{36}==>your-github-token-here
ghr_[a-zA-Z0-9]{36}==>your-github-token-here
"@ | Out-File -FilePath $replaceFile -Encoding UTF8

# 4. Ejecutar git filter-repo
Write-Host "üßπ Ejecutando git filter-repo..." -ForegroundColor Yellow
git filter-repo --replace-text $replaceFile --force

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ git filter-repo ejecutado correctamente" -ForegroundColor Green
} else {
    Write-Host "‚ùå Error ejecutando git filter-repo" -ForegroundColor Red
    exit 1
}

# 5. Forzar push
Write-Host "üì§ Forzando push al repositorio..." -ForegroundColor Yellow
Write-Host "‚ö†Ô∏è  ADVERTENCIA: Esto reescribir√° el historial del repositorio" -ForegroundColor Red
Write-Host "   Todos los colaboradores necesitar√°n clonar el repositorio de nuevo" -ForegroundColor Red

$confirm = Read-Host "¬øEst√°s seguro de que quieres continuar? (y/N)"
if ($confirm -eq "y" -or $confirm -eq "Y") {
    git push origin main --force
    Write-Host "‚úÖ Push forzado completado" -ForegroundColor Green
} else {
    Write-Host "‚ùå Operaci√≥n cancelada" -ForegroundColor Yellow
}

# 6. Limpiar
Remove-Item $replaceFile -ErrorAction SilentlyContinue

Write-Host "üéâ Proceso completado!" -ForegroundColor Green 