#!/usr/bin/env node

/**
 * Script de inicio simple para Render
 * Enfoque directo sin complejidad innecesaria
 */

import { config } from 'dotenv';
import fs from 'fs';
import path from 'path';

// Configurar dotenv
config();

console.log('üöÄ ===== INICIO RENDER SIMPLE =====');
console.log(`üìÖ Timestamp: ${new Date().toISOString()}`);
console.log(`üåç NODE_ENV: ${process.env.NODE_ENV}`);
console.log(`üîå PORT: ${process.env.PORT}`);
console.log(`üìÅ PWD: ${process.cwd()}`);

// Verificaciones b√°sicas
console.log('\nüîç Verificaciones b√°sicas...');

// 1. Verificar archivo de build
if (!fs.existsSync('dist/index.js')) {
  console.error('‚ùå dist/index.js no encontrado. Ejecutando build...');
  try {
    const { execSync } = await import('child_process');
    execSync('npm run build', { stdio: 'inherit' });
    console.log('‚úÖ Build completado');
  } catch (error) {
    console.error('‚ùå Error en build:', error.message);
    process.exit(1);
  }
} else {
  console.log('‚úÖ dist/index.js existe');
}

// 2. Verificar variables cr√≠ticas
const criticalVars = ['DATABASE_URL', 'NODE_ENV', 'PORT'];
for (const varName of criticalVars) {
  if (!process.env[varName]) {
    console.error(`‚ùå Variable cr√≠tica no configurada: ${varName}`);
    process.exit(1);
  }
  console.log(`‚úÖ ${varName} configurada`);
}

// 3. Iniciar servidor
console.log('\nüöÄ Iniciando servidor...');
console.log(`üìä Puerto: ${process.env.PORT}`);
console.log(`üåç Entorno: ${process.env.NODE_ENV}`);

try {
  const { spawn } = await import('child_process');
  const serverPath = path.join(process.cwd(), 'dist', 'index.js');
  
  console.log(`üéØ Iniciando desde: ${serverPath}`);
  
  const server = spawn('node', [serverPath], {
    stdio: 'inherit',
    env: {
      ...process.env,
      NODE_ENV: 'production'
    }
  });
  
  // Manejar se√±ales
  process.on('SIGTERM', () => {
    console.log('üõë SIGTERM recibido, cerrando...');
    server.kill('SIGTERM');
  });
  
  process.on('SIGINT', () => {
    console.log('üõë SIGINT recibido, cerrando...');
    server.kill('SIGINT');
  });
  
  server.on('close', (code) => {
    console.log(`üîÑ Servidor cerrado con c√≥digo: ${code}`);
    process.exit(code || 0);
  });
  
  server.on('error', (error) => {
    console.error('‚ùå Error en servidor:', error);
    process.exit(1);
  });
  
  console.log('‚úÖ Servidor iniciado correctamente');
  
} catch (error) {
  console.error('‚ùå Error iniciando servidor:', error);
  process.exit(1);
} 