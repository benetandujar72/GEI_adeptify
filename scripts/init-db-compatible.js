#!/usr/bin/env node

// Script de inicializaci√≥n compatible con la estructura actual de las tablas
import postgres from 'postgres';
import { config } from 'dotenv';
import bcrypt from 'bcryptjs';

config();

const databaseUrl = process.env.DATABASE_URL;

if (!databaseUrl) {
  console.error('‚ùå DATABASE_URL no configurada');
  process.exit(1);
}

const sql = postgres(databaseUrl, {
  max: 1,
  ssl: process.env.NODE_ENV === 'production' ? {
    rejectUnauthorized: false
  } : false
});

async function initializeDatabaseCompatible() {
  console.log('üóÑÔ∏è Inicializando base de datos con datos de prueba (compatible)...');
  console.log('==============================================================');
  
  try {
    // Verificar conexi√≥n
    console.log('üîç Verificando conexi√≥n a base de datos...');
    await sql`SELECT 1`;
    console.log('‚úÖ Conexi√≥n a base de datos establecida');
    
    // Verificar estructura de tabla modules
    console.log('üîç Verificando estructura de tabla modules...');
    const moduleColumns = await sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'modules' 
      ORDER BY ordinal_position
    `;
    
    const hasDisplayName = moduleColumns.some(col => col.column_name === 'display_name');
    const hasCode = moduleColumns.some(col => col.column_name === 'code');
    
    console.log(`  üìù Columnas disponibles en modules: ${moduleColumns.map(c => c.column_name).join(', ')}`);
    console.log(`  ‚úÖ display_name: ${hasDisplayName ? 'S√ç' : 'NO'}`);
    console.log(`  ‚úÖ code: ${hasCode ? 'S√ç' : 'NO'}`);
    
    console.log('\nüìä Creando datos de prueba...');
    
    // 1. Crear instituto
    console.log('üè´ Creando instituto de prueba...');
    let institute;
    const [instituteResult] = await sql`
      INSERT INTO institutes (name, code, address, phone, email, website)
      VALUES (
        'Institut de Prova GEI',
        'GEI001',
        'Carrer de Prova, 123, Barcelona',
        '+34 93 123 45 67',
        'info@gei-prova.es',
        'https://gei-prova.es'
      )
      ON CONFLICT (code) DO NOTHING
      RETURNING *
    `;
    
    if (instituteResult) {
      institute = instituteResult;
      console.log(`‚úÖ Instituto creado: ${institute.name} (${institute.code})`);
    } else {
      console.log('‚úÖ Instituto ya existe, usando el existente');
      const [existingInstitute] = await sql`SELECT * FROM institutes WHERE code = 'GEI001'`;
      institute = existingInstitute;
    }
    
    // 2. Crear a√±o acad√©mico
    console.log('üìÖ Creando a√±o acad√©mico...');
    const [academicYear] = await sql`
      INSERT INTO academic_years (institute_id, name, start_date, end_date, is_active)
      VALUES (
        ${institute.id},
        '2024-2025',
        '2024-09-01',
        '2025-06-30',
        true
      )
      ON CONFLICT DO NOTHING
      RETURNING *
    `;
    
    if (academicYear) {
      console.log(`‚úÖ A√±o acad√©mico creado: ${academicYear.name}`);
    } else {
      console.log('‚úÖ A√±o acad√©mico ya existe, usando el existente');
      const [existingYear] = await sql`SELECT * FROM academic_years WHERE name = '2024-2025' AND institute_id = ${institute.id}`;
      academicYear = existingYear;
    }
    
    // 3. Crear m√≥dulos (compatible con estructura actual)
    console.log('üìö Creando m√≥dulos...');
    let modulesData;
    
    if (hasDisplayName && !hasCode) {
      // Estructura nueva: name, display_name, description
      modulesData = [
        { name: 'Gesti√≥ d\'Avaluacions', display_name: 'Gesti√≥ d\'Avaluacions', description: 'M√≤dul per gestionar avaluacions i notes' },
        { name: 'Control d\'Assist√®ncia', display_name: 'Control d\'Assist√®ncia', description: 'M√≤dul per controlar l\'assist√®ncia dels alumnes' },
        { name: 'Gesti√≥ de Gu√†rdies', display_name: 'Gesti√≥ de Gu√†rdies', description: 'M√≤dul per gestionar les gu√†rdies dels professors' },
        { name: 'Enquestes', display_name: 'Enquestes', description: 'M√≤dul per crear i gestionar enquestes' },
        { name: 'Recursos', display_name: 'Recursos', description: 'M√≤dul per gestionar recursos i reserves' },
        { name: 'Anal√≠tiques', display_name: 'Anal√≠tiques', description: 'M√≤dul per visualitzar anal√≠tiques i informes' }
      ];
    } else if (hasCode && !hasDisplayName) {
      // Estructura antigua: name, code, description
      modulesData = [
        { name: 'Gesti√≥ d\'Avaluacions', code: 'EVAL', description: 'M√≤dul per gestionar avaluacions i notes' },
        { name: 'Control d\'Assist√®ncia', code: 'ATT', description: 'M√≤dul per controlar l\'assist√®ncia dels alumnes' },
        { name: 'Gesti√≥ de Gu√†rdies', code: 'GUARD', description: 'M√≤dul per gestionar les gu√†rdies dels professors' },
        { name: 'Enquestes', code: 'SURV', description: 'M√≤dul per crear i gestionar enquestes' },
        { name: 'Recursos', code: 'RES', description: 'M√≤dul per gestionar recursos i reserves' },
        { name: 'Anal√≠tiques', code: 'ANAL', description: 'M√≤dul per visualitzar anal√≠tiques i informes' }
      ];
    } else {
      // Solo name y description
      modulesData = [
        { name: 'Gesti√≥ d\'Avaluacions', description: 'M√≤dul per gestionar avaluacions i notes' },
        { name: 'Control d\'Assist√®ncia', description: 'M√≤dul per controlar l\'assist√®ncia dels alumnes' },
        { name: 'Gesti√≥ de Gu√†rdies', description: 'M√≤dul per gestionar les gu√†rdies dels professors' },
        { name: 'Enquestes', description: 'M√≤dul per crear i gestionar enquestes' },
        { name: 'Recursos', description: 'M√≤dul per gestionar recursos i reserves' },
        { name: 'Anal√≠tiques', description: 'M√≤dul per visualitzar anal√≠tiques i informes' }
      ];
    }
    
    // Insertar m√≥dulos uno por uno para evitar problemas de estructura
    const createdModules = [];
    for (const moduleData of modulesData) {
      try {
        const [module] = await sql`
          INSERT INTO modules ${sql(moduleData)}
          ON CONFLICT (name) DO NOTHING
          RETURNING *
        `;
        if (module) {
          createdModules.push(module);
          console.log(`  ‚úÖ M√≥dulo creado: ${module.name}`);
        } else {
          console.log(`  ‚ö†Ô∏è M√≥dulo ya existe: ${moduleData.name}`);
          // Obtener el m√≥dulo existente
          const [existingModule] = await sql`SELECT * FROM modules WHERE name = ${moduleData.name}`;
          if (existingModule) {
            createdModules.push(existingModule);
          }
        }
      } catch (error) {
        console.log(`  ‚ùå Error creando m√≥dulo ${moduleData.name}: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ ${createdModules.length} m√≥dulos procesados`);
    
    // 4. Asignar m√≥dulos al instituto
    console.log('üîó Asignando m√≥dulos al instituto...');
    for (const module of createdModules) {
      try {
        await sql`
          INSERT INTO institute_modules (institute_id, module_id, is_active, settings)
          VALUES (${institute.id}, ${module.id}, true, '{}')
          ON CONFLICT (institute_id, module_id) DO NOTHING
        `;
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error asignando m√≥dulo ${module.name}: ${error.message}`);
      }
    }
    console.log('‚úÖ M√≥dulos asignados al instituto');
    
    // 5. Crear usuarios de prueba
    console.log('üë• Creando usuarios de prueba...');
    
    // Hash de contrase√±as
    const passwordHash = await bcrypt.hash('password123', 10);
    
    const usersData = [
      {
        institute_id: institute.id,
        email: 'superadmin@gei.es',
        display_name: 'Super Administrador',
        first_name: 'Super',
        last_name: 'Admin',
        role: 'super_admin',
        password_hash: passwordHash,
        preferences: {
          theme: 'dark',
          language: 'ca',
          notifications: true
        }
      },
      {
        institute_id: institute.id,
        email: 'admin@gei.es',
        display_name: 'Administrador Institut',
        first_name: 'Admin',
        last_name: 'Institut',
        role: 'institute_admin',
        password_hash: passwordHash,
        preferences: {
          theme: 'light',
          language: 'ca',
          notifications: true
        }
      },
      {
        institute_id: institute.id,
        email: 'professor@gei.es',
        display_name: 'Professor Prova',
        first_name: 'Professor',
        last_name: 'Prova',
        role: 'teacher',
        password_hash: passwordHash,
        preferences: {
          theme: 'system',
          language: 'ca',
          notifications: true
        }
      },
      {
        institute_id: institute.id,
        email: 'alumne@gei.es',
        display_name: 'Alumne Prova',
        first_name: 'Alumne',
        last_name: 'Prova',
        role: 'student',
        password_hash: passwordHash,
        preferences: {
          theme: 'light',
          language: 'ca',
          notifications: false
        }
      }
    ];
    
    const createdUsers = [];
    for (const userData of usersData) {
      try {
        const [user] = await sql`
          INSERT INTO users ${sql(userData)}
          ON CONFLICT (email) DO NOTHING
          RETURNING *
        `;
        if (user) {
          createdUsers.push(user);
          console.log(`  ‚úÖ Usuario creado: ${user.display_name} (${user.email})`);
        } else {
          console.log(`  ‚ö†Ô∏è Usuario ya existe: ${userData.email}`);
        }
      } catch (error) {
        console.log(`  ‚ùå Error creando usuario ${userData.email}: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ ${createdUsers.length} usuarios procesados`);
    
    // 6. Crear clases de prueba
    console.log('üìö Creando clases de prueba...');
    const classesData = [
      {
        institute_id: institute.id,
        academic_year_id: academicYear.id,
        name: '1r ESO A',
        description: 'Primer curs d\'ESO, grup A',
        max_students: 30,
        is_active: true
      },
      {
        institute_id: institute.id,
        academic_year_id: academicYear.id,
        name: '2n ESO B',
        description: 'Segon curs d\'ESO, grup B',
        max_students: 28,
        is_active: true
      }
    ];
    
    for (const classData of classesData) {
      try {
        await sql`
          INSERT INTO classes ${sql(classData)}
          ON CONFLICT DO NOTHING
        `;
        console.log(`  ‚úÖ Clase creada: ${classData.name}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error creando clase ${classData.name}: ${error.message}`);
      }
    }
    
    // 7. Crear competencias de prueba
    console.log('üéØ Creando competencias de prueba...');
    const competenciesData = [
      {
        institute_id: institute.id,
        academic_year_id: academicYear.id,
        code: 'CT_CC_1',
        abbreviation: 'CC1',
        subject: 'Matem√†tiques',
        description: 'Compet√®ncia matem√†tica i compet√®ncies b√†siques en ci√®ncia i tecnologia',
        type: 'CT_CC'
      },
      {
        institute_id: institute.id,
        academic_year_id: academicYear.id,
        code: 'CT_CD_1',
        abbreviation: 'CD1',
        subject: 'Llengua Catalana',
        description: 'Compet√®ncia en comunicaci√≥ ling√º√≠stica',
        type: 'CT_CD'
      }
    ];
    
    for (const compData of competenciesData) {
      try {
        await sql`
          INSERT INTO competencies ${sql(compData)}
          ON CONFLICT DO NOTHING
        `;
        console.log(`  ‚úÖ Competencia creada: ${compData.code}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error creando competencia ${compData.code}: ${error.message}`);
      }
    }
    
    // 8. Crear recursos de prueba
    console.log('üì¶ Creando recursos de prueba...');
    const resourcesData = [
      {
        institute_id: institute.id,
        name: 'Aula d\'Inform√†tica 1',
        description: 'Aula amb 25 ordinadors per a classes d\'inform√†tica',
        type: 'classroom',
        capacity: 25,
        is_active: true
      },
      {
        institute_id: institute.id,
        name: 'Projector Sala d\'Actes',
        description: 'Projector per a presentacions i actes',
        type: 'equipment',
        capacity: 1,
        is_active: true
      }
    ];
    
    for (const resData of resourcesData) {
      try {
        await sql`
          INSERT INTO resources ${sql(resData)}
          ON CONFLICT DO NOTHING
        `;
        console.log(`  ‚úÖ Recurso creado: ${resData.name}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Error creando recurso ${resData.name}: ${error.message}`);
      }
    }
    
    console.log('\nüéâ Inicializaci√≥n completada exitosamente!');
    console.log('üìä Resumen:');
    console.log(`  üè´ Instituto: ${institute.name}`);
    console.log(`  üìÖ A√±o acad√©mico: ${academicYear.name}`);
    console.log(`  üìö M√≥dulos: ${createdModules.length}`);
    console.log(`  üë• Usuarios: ${createdUsers.length}`);
    console.log('  üìö Clases: 2');
    console.log('  üéØ Competencias: 2');
    console.log('  üì¶ Recursos: 2');
    
    console.log('\nüîë Credenciales de acceso:');
    console.log('========================');
    console.log('üëë Super Admin: superadmin@gei.es / password123');
    console.log('üë®‚Äçüíº Admin: admin@gei.es / password123');
    console.log('üë®‚Äçüè´ Professor: professor@gei.es / password123');
    console.log('üë®‚Äçüéì Alumne: alumne@gei.es / password123');
    
  } catch (error) {
    console.error('‚ùå Error al inicializar la base de datos:', error);
    throw error;
  } finally {
    await sql.end();
  }
}

initializeDatabaseCompatible().catch((error) => {
  console.error('‚ùå Error en el script:', error);
  process.exit(1);
}); 